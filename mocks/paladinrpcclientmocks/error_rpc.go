// Code generated by mockery v2.53.0. DO NOT EDIT.

package paladinrpcclientmocks

import (
	rpcclient "github.com/kaleido-io/paladin/toolkit/pkg/rpcclient"
	mock "github.com/stretchr/testify/mock"
)

// ErrorRPC is an autogenerated mock type for the ErrorRPC type
type ErrorRPC struct {
	mock.Mock
}

// Error provides a mock function with no fields
func (_m *ErrorRPC) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RPCError provides a mock function with no fields
func (_m *ErrorRPC) RPCError() *rpcclient.RPCError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCError")
	}

	var r0 *rpcclient.RPCError
	if rf, ok := ret.Get(0).(func() *rpcclient.RPCError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcclient.RPCError)
		}
	}

	return r0
}

// NewErrorRPC creates a new instance of ErrorRPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorRPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorRPC {
	mock := &ErrorRPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
