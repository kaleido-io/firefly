// Code generated by mockery v2.46.0. DO NOT EDIT.

package paladinrpcclientmocks

import (
	context "context"

	rpcclient "github.com/kaleido-io/paladin/sdk/go/pkg/rpcclient"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Subscription is an autogenerated mock type for the Subscription type
type Subscription struct {
	mock.Mock
}

// LocalID provides a mock function with given fields:
func (_m *Subscription) LocalID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// Notifications provides a mock function with given fields:
func (_m *Subscription) Notifications() chan rpcclient.RPCSubscriptionNotification {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Notifications")
	}

	var r0 chan rpcclient.RPCSubscriptionNotification
	if rf, ok := ret.Get(0).(func() chan rpcclient.RPCSubscriptionNotification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan rpcclient.RPCSubscriptionNotification)
		}
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: ctx
func (_m *Subscription) Unsubscribe(ctx context.Context) rpcclient.ErrorRPC {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 rpcclient.ErrorRPC
	if rf, ok := ret.Get(0).(func(context.Context) rpcclient.ErrorRPC); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpcclient.ErrorRPC)
		}
	}

	return r0
}

// NewSubscription creates a new instance of Subscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscription {
	mock := &Subscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
