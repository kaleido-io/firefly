// Code generated by mockery v2.53.0. DO NOT EDIT.

package paladinrpcclientmocks

import (
	context "context"

	rpcclient "github.com/kaleido-io/paladin/toolkit/pkg/rpcclient"
	mock "github.com/stretchr/testify/mock"

	tktypes "github.com/kaleido-io/paladin/toolkit/pkg/tktypes"
)

// RPCSubscriptionNotification is an autogenerated mock type for the RPCSubscriptionNotification type
type RPCSubscriptionNotification struct {
	mock.Mock
}

// Ack provides a mock function with given fields: ctx
func (_m *RPCSubscriptionNotification) Ack(ctx context.Context) rpcclient.ErrorRPC {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 rpcclient.ErrorRPC
	if rf, ok := ret.Get(0).(func(context.Context) rpcclient.ErrorRPC); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpcclient.ErrorRPC)
		}
	}

	return r0
}

// GetCurrentSubID provides a mock function with no fields
func (_m *RPCSubscriptionNotification) GetCurrentSubID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentSubID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetResult provides a mock function with no fields
func (_m *RPCSubscriptionNotification) GetResult() tktypes.RawJSON {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResult")
	}

	var r0 tktypes.RawJSON
	if rf, ok := ret.Get(0).(func() tktypes.RawJSON); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tktypes.RawJSON)
		}
	}

	return r0
}

// Nack provides a mock function with given fields: ctx
func (_m *RPCSubscriptionNotification) Nack(ctx context.Context) rpcclient.ErrorRPC {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Nack")
	}

	var r0 rpcclient.ErrorRPC
	if rf, ok := ret.Get(0).(func(context.Context) rpcclient.ErrorRPC); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpcclient.ErrorRPC)
		}
	}

	return r0
}

// NewRPCSubscriptionNotification creates a new instance of RPCSubscriptionNotification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRPCSubscriptionNotification(t interface {
	mock.TestingT
	Cleanup(func())
}) *RPCSubscriptionNotification {
	mock := &RPCSubscriptionNotification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
