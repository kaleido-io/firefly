// Code generated by mockery v2.22.1. DO NOT EDIT.

package leaderelectionmocks

import (
	context "context"

	config "github.com/hyperledger/firefly-common/pkg/config"

	leaderelection "github.com/hyperledger/firefly/pkg/leaderelection"

	mock "github.com/stretchr/testify/mock"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *leaderelection.Capabilities {
	ret := _m.Called()

	var r0 *leaderelection.Capabilities
	if rf, ok := ret.Get(0).(func() *leaderelection.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*leaderelection.Capabilities)
		}
	}

	return r0
}

// Init provides a mock function with given fields: ctx, name, _a2
func (_m *Plugin) Init(ctx context.Context, name string, _a2 config.Section) error {
	ret := _m.Called(ctx, name, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, config.Section) error); ok {
		r0 = rf(ctx, name, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitConfig provides a mock function with given fields: _a0
func (_m *Plugin) InitConfig(_a0 config.Section) {
	_m.Called(_a0)
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RunLeaderElection provides a mock function with given fields: ctx, electionResult
func (_m *Plugin) RunLeaderElection(ctx context.Context, electionResult chan bool) {
	_m.Called(ctx, electionResult)
}

type mockConstructorTestingTNewPlugin interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlugin creates a new instance of Plugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlugin(t mockConstructorTestingTNewPlugin) *Plugin {
	mock := &Plugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
