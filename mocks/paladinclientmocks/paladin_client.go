// Code generated by mockery v2.46.0. DO NOT EDIT.

package paladinclientmocks

import (
	context "context"

	abi "github.com/hyperledger/firefly-signer/pkg/abi"

	mock "github.com/stretchr/testify/mock"

	pldclient "github.com/kaleido-io/paladin/sdk/go/pkg/pldclient"

	pldconf "github.com/kaleido-io/paladin/config/pkg/pldconf"

	rpcclient "github.com/kaleido-io/paladin/sdk/go/pkg/rpcclient"

	time "time"
)

// PaladinClient is an autogenerated mock type for the PaladinClient type
type PaladinClient struct {
	mock.Mock
}

// BlockIndex provides a mock function with given fields:
func (_m *PaladinClient) BlockIndex() pldclient.BlockIndex {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockIndex")
	}

	var r0 pldclient.BlockIndex
	if rf, ok := ret.Get(0).(func() pldclient.BlockIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.BlockIndex)
		}
	}

	return r0
}

// CallRPC provides a mock function with given fields: ctx, result, method, params
func (_m *PaladinClient) CallRPC(ctx context.Context, result interface{}, method string, params ...interface{}) rpcclient.ErrorRPC {
	var _ca []interface{}
	_ca = append(_ca, ctx, result, method)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallRPC")
	}

	var r0 rpcclient.ErrorRPC
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) rpcclient.ErrorRPC); ok {
		r0 = rf(ctx, result, method, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpcclient.ErrorRPC)
		}
	}

	return r0
}

// ForABI provides a mock function with given fields: ctx, a
func (_m *PaladinClient) ForABI(ctx context.Context, a abi.ABI) pldclient.TxBuilder {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for ForABI")
	}

	var r0 pldclient.TxBuilder
	if rf, ok := ret.Get(0).(func(context.Context, abi.ABI) pldclient.TxBuilder); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.TxBuilder)
		}
	}

	return r0
}

// HTTP provides a mock function with given fields: ctx, conf
func (_m *PaladinClient) HTTP(ctx context.Context, conf *pldconf.HTTPClientConfig) (pldclient.PaladinClient, error) {
	ret := _m.Called(ctx, conf)

	if len(ret) == 0 {
		panic("no return value specified for HTTP")
	}

	var r0 pldclient.PaladinClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pldconf.HTTPClientConfig) (pldclient.PaladinClient, error)); ok {
		return rf(ctx, conf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pldconf.HTTPClientConfig) pldclient.PaladinClient); ok {
		r0 = rf(ctx, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.PaladinClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pldconf.HTTPClientConfig) error); ok {
		r1 = rf(ctx, conf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyManager provides a mock function with given fields:
func (_m *PaladinClient) KeyManager() pldclient.KeyManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyManager")
	}

	var r0 pldclient.KeyManager
	if rf, ok := ret.Get(0).(func() pldclient.KeyManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.KeyManager)
		}
	}

	return r0
}

// PTX provides a mock function with given fields:
func (_m *PaladinClient) PTX() pldclient.PTX {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PTX")
	}

	var r0 pldclient.PTX
	if rf, ok := ret.Get(0).(func() pldclient.PTX); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.PTX)
		}
	}

	return r0
}

// PrivacyGroups provides a mock function with given fields:
func (_m *PaladinClient) PrivacyGroups() pldclient.PrivacyGroups {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivacyGroups")
	}

	var r0 pldclient.PrivacyGroups
	if rf, ok := ret.Get(0).(func() pldclient.PrivacyGroups); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.PrivacyGroups)
		}
	}

	return r0
}

// ReceiptPollingInterval provides a mock function with given fields: t
func (_m *PaladinClient) ReceiptPollingInterval(t time.Duration) pldclient.PaladinClient {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for ReceiptPollingInterval")
	}

	var r0 pldclient.PaladinClient
	if rf, ok := ret.Get(0).(func(time.Duration) pldclient.PaladinClient); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.PaladinClient)
		}
	}

	return r0
}

// Registry provides a mock function with given fields:
func (_m *PaladinClient) Registry() pldclient.Registry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Registry")
	}

	var r0 pldclient.Registry
	if rf, ok := ret.Get(0).(func() pldclient.Registry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.Registry)
		}
	}

	return r0
}

// StateStore provides a mock function with given fields:
func (_m *PaladinClient) StateStore() pldclient.StateStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StateStore")
	}

	var r0 pldclient.StateStore
	if rf, ok := ret.Get(0).(func() pldclient.StateStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.StateStore)
		}
	}

	return r0
}

// Transport provides a mock function with given fields:
func (_m *PaladinClient) Transport() pldclient.Transport {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Transport")
	}

	var r0 pldclient.Transport
	if rf, ok := ret.Get(0).(func() pldclient.Transport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.Transport)
		}
	}

	return r0
}

// TxBuilder provides a mock function with given fields: ctx
func (_m *PaladinClient) TxBuilder(ctx context.Context) pldclient.TxBuilder {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TxBuilder")
	}

	var r0 pldclient.TxBuilder
	if rf, ok := ret.Get(0).(func(context.Context) pldclient.TxBuilder); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.TxBuilder)
		}
	}

	return r0
}

// WebSocket provides a mock function with given fields: ctx, conf
func (_m *PaladinClient) WebSocket(ctx context.Context, conf *pldconf.WSClientConfig) (pldclient.PaladinWSClient, error) {
	ret := _m.Called(ctx, conf)

	if len(ret) == 0 {
		panic("no return value specified for WebSocket")
	}

	var r0 pldclient.PaladinWSClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pldconf.WSClientConfig) (pldclient.PaladinWSClient, error)); ok {
		return rf(ctx, conf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pldconf.WSClientConfig) pldclient.PaladinWSClient); ok {
		r0 = rf(ctx, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pldclient.PaladinWSClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pldconf.WSClientConfig) error); ok {
		r1 = rf(ctx, conf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaladinClient creates a new instance of PaladinClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaladinClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaladinClient {
	mock := &PaladinClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
