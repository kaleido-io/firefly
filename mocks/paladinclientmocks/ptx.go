// Code generated by mockery v2.53.0. DO NOT EDIT.

package paladinclientmocks

import (
	context "context"

	abi "github.com/hyperledger/firefly-signer/pkg/abi"

	mock "github.com/stretchr/testify/mock"

	pldapi "github.com/kaleido-io/paladin/toolkit/pkg/pldapi"

	pldclient "github.com/kaleido-io/paladin/toolkit/pkg/pldclient"

	query "github.com/kaleido-io/paladin/toolkit/pkg/query"

	rpcclient "github.com/kaleido-io/paladin/toolkit/pkg/rpcclient"

	tktypes "github.com/kaleido-io/paladin/toolkit/pkg/tktypes"

	uuid "github.com/google/uuid"
)

// PTX is an autogenerated mock type for the PTX type
type PTX struct {
	mock.Mock
}

// Call provides a mock function with given fields: ctx, tx
func (_m *PTX) Call(ctx context.Context, tx *pldapi.TransactionCall) (tktypes.RawJSON, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 tktypes.RawJSON
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionCall) (tktypes.RawJSON, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionCall) tktypes.RawJSON); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tktypes.RawJSON)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pldapi.TransactionCall) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReceiptListener provides a mock function with given fields: ctx, listener
func (_m *PTX) CreateReceiptListener(ctx context.Context, listener *pldapi.TransactionReceiptListener) (bool, error) {
	ret := _m.Called(ctx, listener)

	if len(ret) == 0 {
		panic("no return value specified for CreateReceiptListener")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionReceiptListener) (bool, error)); ok {
		return rf(ctx, listener)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionReceiptListener) bool); ok {
		r0 = rf(ctx, listener)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pldapi.TransactionReceiptListener) error); ok {
		r1 = rf(ctx, listener)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeCall provides a mock function with given fields: ctx, callData, dataFormat
func (_m *PTX) DecodeCall(ctx context.Context, callData tktypes.HexBytes, dataFormat tktypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error) {
	ret := _m.Called(ctx, callData, dataFormat)

	if len(ret) == 0 {
		panic("no return value specified for DecodeCall")
	}

	var r0 *pldapi.ABIDecodedData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tktypes.HexBytes, tktypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)); ok {
		return rf(ctx, callData, dataFormat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tktypes.HexBytes, tktypes.JSONFormatOptions) *pldapi.ABIDecodedData); ok {
		r0 = rf(ctx, callData, dataFormat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.ABIDecodedData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tktypes.HexBytes, tktypes.JSONFormatOptions) error); ok {
		r1 = rf(ctx, callData, dataFormat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeError provides a mock function with given fields: ctx, revertData, dataFormat
func (_m *PTX) DecodeError(ctx context.Context, revertData tktypes.HexBytes, dataFormat tktypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error) {
	ret := _m.Called(ctx, revertData, dataFormat)

	if len(ret) == 0 {
		panic("no return value specified for DecodeError")
	}

	var r0 *pldapi.ABIDecodedData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tktypes.HexBytes, tktypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)); ok {
		return rf(ctx, revertData, dataFormat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tktypes.HexBytes, tktypes.JSONFormatOptions) *pldapi.ABIDecodedData); ok {
		r0 = rf(ctx, revertData, dataFormat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.ABIDecodedData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tktypes.HexBytes, tktypes.JSONFormatOptions) error); ok {
		r1 = rf(ctx, revertData, dataFormat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeEvent provides a mock function with given fields: ctx, topics, eventData, dataFormat
func (_m *PTX) DecodeEvent(ctx context.Context, topics []tktypes.Bytes32, eventData tktypes.HexBytes, dataFormat tktypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error) {
	ret := _m.Called(ctx, topics, eventData, dataFormat)

	if len(ret) == 0 {
		panic("no return value specified for DecodeEvent")
	}

	var r0 *pldapi.ABIDecodedData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []tktypes.Bytes32, tktypes.HexBytes, tktypes.JSONFormatOptions) (*pldapi.ABIDecodedData, error)); ok {
		return rf(ctx, topics, eventData, dataFormat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []tktypes.Bytes32, tktypes.HexBytes, tktypes.JSONFormatOptions) *pldapi.ABIDecodedData); ok {
		r0 = rf(ctx, topics, eventData, dataFormat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.ABIDecodedData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []tktypes.Bytes32, tktypes.HexBytes, tktypes.JSONFormatOptions) error); ok {
		r1 = rf(ctx, topics, eventData, dataFormat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReceiptListener provides a mock function with given fields: ctx, listenerName
func (_m *PTX) DeleteReceiptListener(ctx context.Context, listenerName string) (bool, error) {
	ret := _m.Called(ctx, listenerName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReceiptListener")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, listenerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, listenerName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listenerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainReceipt provides a mock function with given fields: ctx, domain, txID
func (_m *PTX) GetDomainReceipt(ctx context.Context, domain string, txID uuid.UUID) (tktypes.RawJSON, error) {
	ret := _m.Called(ctx, domain, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainReceipt")
	}

	var r0 tktypes.RawJSON
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) (tktypes.RawJSON, error)); ok {
		return rf(ctx, domain, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) tktypes.RawJSON); ok {
		r0 = rf(ctx, domain, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tktypes.RawJSON)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID) error); ok {
		r1 = rf(ctx, domain, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreparedTransaction provides a mock function with given fields: ctx, txID
func (_m *PTX) GetPreparedTransaction(ctx context.Context, txID uuid.UUID) (*pldapi.PreparedTransaction, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetPreparedTransaction")
	}

	var r0 *pldapi.PreparedTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.PreparedTransaction, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.PreparedTransaction); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.PreparedTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceiptListener provides a mock function with given fields: ctx, listenerName
func (_m *PTX) GetReceiptListener(ctx context.Context, listenerName string) (*pldapi.TransactionReceiptListener, error) {
	ret := _m.Called(ctx, listenerName)

	if len(ret) == 0 {
		panic("no return value specified for GetReceiptListener")
	}

	var r0 *pldapi.TransactionReceiptListener
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pldapi.TransactionReceiptListener, error)); ok {
		return rf(ctx, listenerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pldapi.TransactionReceiptListener); ok {
		r0 = rf(ctx, listenerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionReceiptListener)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listenerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateReceipt provides a mock function with given fields: ctx, txID
func (_m *PTX) GetStateReceipt(ctx context.Context, txID uuid.UUID) (*pldapi.TransactionStates, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetStateReceipt")
	}

	var r0 *pldapi.TransactionStates
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.TransactionStates, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.TransactionStates); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionStates)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoredABI provides a mock function with given fields: ctx, hashRef
func (_m *PTX) GetStoredABI(ctx context.Context, hashRef tktypes.Bytes32) (*pldapi.StoredABI, error) {
	ret := _m.Called(ctx, hashRef)

	if len(ret) == 0 {
		panic("no return value specified for GetStoredABI")
	}

	var r0 *pldapi.StoredABI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tktypes.Bytes32) (*pldapi.StoredABI, error)); ok {
		return rf(ctx, hashRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tktypes.Bytes32) *pldapi.StoredABI); ok {
		r0 = rf(ctx, hashRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.StoredABI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tktypes.Bytes32) error); ok {
		r1 = rf(ctx, hashRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, txID
func (_m *PTX) GetTransaction(ctx context.Context, txID uuid.UUID) (*pldapi.Transaction, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *pldapi.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.Transaction, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.Transaction); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByIdempotencyKey provides a mock function with given fields: ctx, idempotencyKey
func (_m *PTX) GetTransactionByIdempotencyKey(ctx context.Context, idempotencyKey string) (*pldapi.Transaction, error) {
	ret := _m.Called(ctx, idempotencyKey)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByIdempotencyKey")
	}

	var r0 *pldapi.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pldapi.Transaction, error)); ok {
		return rf(ctx, idempotencyKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pldapi.Transaction); ok {
		r0 = rf(ctx, idempotencyKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, idempotencyKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionFull provides a mock function with given fields: ctx, txID
func (_m *PTX) GetTransactionFull(ctx context.Context, txID uuid.UUID) (*pldapi.TransactionFull, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionFull")
	}

	var r0 *pldapi.TransactionFull
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.TransactionFull, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.TransactionFull); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionFull)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionReceipt provides a mock function with given fields: ctx, txID
func (_m *PTX) GetTransactionReceipt(ctx context.Context, txID uuid.UUID) (*pldapi.TransactionReceipt, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionReceipt")
	}

	var r0 *pldapi.TransactionReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.TransactionReceipt, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.TransactionReceipt); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionReceipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionReceiptFull provides a mock function with given fields: ctx, txID
func (_m *PTX) GetTransactionReceiptFull(ctx context.Context, txID uuid.UUID) (*pldapi.TransactionReceiptFull, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionReceiptFull")
	}

	var r0 *pldapi.TransactionReceiptFull
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*pldapi.TransactionReceiptFull, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *pldapi.TransactionReceiptFull); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.TransactionReceiptFull)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Group provides a mock function with no fields
func (_m *PTX) Group() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MethodInfo provides a mock function with given fields: method
func (_m *PTX) MethodInfo(method string) *pldclient.RPCMethodInfo {
	ret := _m.Called(method)

	if len(ret) == 0 {
		panic("no return value specified for MethodInfo")
	}

	var r0 *pldclient.RPCMethodInfo
	if rf, ok := ret.Get(0).(func(string) *pldclient.RPCMethodInfo); ok {
		r0 = rf(method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldclient.RPCMethodInfo)
		}
	}

	return r0
}

// Methods provides a mock function with no fields
func (_m *PTX) Methods() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Methods")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// PrepareTransaction provides a mock function with given fields: ctx, tx
func (_m *PTX) PrepareTransaction(ctx context.Context, tx *pldapi.TransactionInput) (*uuid.UUID, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareTransaction")
	}

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionInput) (*uuid.UUID, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionInput) *uuid.UUID); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pldapi.TransactionInput) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareTransactions provides a mock function with given fields: ctx, txs
func (_m *PTX) PrepareTransactions(ctx context.Context, txs []*pldapi.TransactionInput) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, txs)

	if len(ret) == 0 {
		panic("no return value specified for PrepareTransactions")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*pldapi.TransactionInput) ([]uuid.UUID, error)); ok {
		return rf(ctx, txs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*pldapi.TransactionInput) []uuid.UUID); ok {
		r0 = rf(ctx, txs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*pldapi.TransactionInput) error); ok {
		r1 = rf(ctx, txs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryPreparedTransactions provides a mock function with given fields: ctx, jq
func (_m *PTX) QueryPreparedTransactions(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.PreparedTransaction, error) {
	ret := _m.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryPreparedTransactions")
	}

	var r0 []*pldapi.PreparedTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.PreparedTransaction, error)); ok {
		return rf(ctx, jq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.PreparedTransaction); ok {
		r0 = rf(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.PreparedTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = rf(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryReceiptListeners provides a mock function with given fields: ctx, jq
func (_m *PTX) QueryReceiptListeners(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.TransactionReceiptListener, error) {
	ret := _m.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryReceiptListeners")
	}

	var r0 []*pldapi.TransactionReceiptListener
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.TransactionReceiptListener, error)); ok {
		return rf(ctx, jq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.TransactionReceiptListener); ok {
		r0 = rf(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.TransactionReceiptListener)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = rf(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryStoredABIs provides a mock function with given fields: ctx, jq
func (_m *PTX) QueryStoredABIs(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.StoredABI, error) {
	ret := _m.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryStoredABIs")
	}

	var r0 []*pldapi.StoredABI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.StoredABI, error)); ok {
		return rf(ctx, jq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.StoredABI); ok {
		r0 = rf(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.StoredABI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = rf(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTransactionReceipts provides a mock function with given fields: ctx, jq
func (_m *PTX) QueryTransactionReceipts(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.TransactionReceipt, error) {
	ret := _m.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransactionReceipts")
	}

	var r0 []*pldapi.TransactionReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.TransactionReceipt, error)); ok {
		return rf(ctx, jq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.TransactionReceipt); ok {
		r0 = rf(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.TransactionReceipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = rf(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTransactions provides a mock function with given fields: ctx, jq
func (_m *PTX) QueryTransactions(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.Transaction, error) {
	ret := _m.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransactions")
	}

	var r0 []*pldapi.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.Transaction, error)); ok {
		return rf(ctx, jq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.Transaction); ok {
		r0 = rf(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = rf(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTransactionsFull provides a mock function with given fields: ctx, jq
func (_m *PTX) QueryTransactionsFull(ctx context.Context, jq *query.QueryJSON) ([]*pldapi.TransactionFull, error) {
	ret := _m.Called(ctx, jq)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransactionsFull")
	}

	var r0 []*pldapi.TransactionFull
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) ([]*pldapi.TransactionFull, error)); ok {
		return rf(ctx, jq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *query.QueryJSON) []*pldapi.TransactionFull); ok {
		r0 = rf(ctx, jq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pldapi.TransactionFull)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *query.QueryJSON) error); ok {
		r1 = rf(ctx, jq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveVerifier provides a mock function with given fields: ctx, keyIdentifier, algorithm, verifierType
func (_m *PTX) ResolveVerifier(ctx context.Context, keyIdentifier string, algorithm string, verifierType string) (string, error) {
	ret := _m.Called(ctx, keyIdentifier, algorithm, verifierType)

	if len(ret) == 0 {
		panic("no return value specified for ResolveVerifier")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, keyIdentifier, algorithm, verifierType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, keyIdentifier, algorithm, verifierType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, keyIdentifier, algorithm, verifierType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTransaction provides a mock function with given fields: ctx, tx
func (_m *PTX) SendTransaction(ctx context.Context, tx *pldapi.TransactionInput) (*uuid.UUID, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SendTransaction")
	}

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionInput) (*uuid.UUID, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pldapi.TransactionInput) *uuid.UUID); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pldapi.TransactionInput) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTransactions provides a mock function with given fields: ctx, txs
func (_m *PTX) SendTransactions(ctx context.Context, txs []*pldapi.TransactionInput) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, txs)

	if len(ret) == 0 {
		panic("no return value specified for SendTransactions")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*pldapi.TransactionInput) ([]uuid.UUID, error)); ok {
		return rf(ctx, txs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*pldapi.TransactionInput) []uuid.UUID); ok {
		r0 = rf(ctx, txs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*pldapi.TransactionInput) error); ok {
		r1 = rf(ctx, txs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReceiptListener provides a mock function with given fields: ctx, listenerName
func (_m *PTX) StartReceiptListener(ctx context.Context, listenerName string) (bool, error) {
	ret := _m.Called(ctx, listenerName)

	if len(ret) == 0 {
		panic("no return value specified for StartReceiptListener")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, listenerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, listenerName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listenerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopReceiptListener provides a mock function with given fields: ctx, listenerName
func (_m *PTX) StopReceiptListener(ctx context.Context, listenerName string) (bool, error) {
	ret := _m.Called(ctx, listenerName)

	if len(ret) == 0 {
		panic("no return value specified for StopReceiptListener")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, listenerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, listenerName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listenerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreABI provides a mock function with given fields: ctx, _a1
func (_m *PTX) StoreABI(ctx context.Context, _a1 abi.ABI) (*pldapi.StoredABI, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StoreABI")
	}

	var r0 *pldapi.StoredABI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, abi.ABI) (*pldapi.StoredABI, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, abi.ABI) *pldapi.StoredABI); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pldapi.StoredABI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, abi.ABI) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeReceipts provides a mock function with given fields: ctx, listenerName
func (_m *PTX) SubscribeReceipts(ctx context.Context, listenerName string) (rpcclient.Subscription, error) {
	ret := _m.Called(ctx, listenerName)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeReceipts")
	}

	var r0 rpcclient.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (rpcclient.Subscription, error)); ok {
		return rf(ctx, listenerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) rpcclient.Subscription); ok {
		r0 = rf(ctx, listenerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpcclient.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listenerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPTX creates a new instance of PTX. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPTX(t interface {
	mock.TestingT
	Cleanup(func())
}) *PTX {
	mock := &PTX{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
