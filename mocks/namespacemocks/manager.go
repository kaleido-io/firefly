// Code generated by mockery v1.0.0. DO NOT EDIT.

package namespacemocks

import (
	context "context"

	blockchain "github.com/hyperledger/firefly/pkg/blockchain"

	database "github.com/hyperledger/firefly/pkg/database"

	dataexchange "github.com/hyperledger/firefly/pkg/dataexchange"

	mock "github.com/stretchr/testify/mock"

	sharedstorage "github.com/hyperledger/firefly/pkg/sharedstorage"

	tokens "github.com/hyperledger/firefly/pkg/tokens"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// GetDatabasePlugin provides a mock function with given fields: ctx, _a1
func (_m *Manager) GetDatabasePlugin(ctx context.Context, _a1 string) (database.Plugin, error) {
	ret := _m.Called(ctx, _a1)

	var r0 database.Plugin
	if rf, ok := ret.Get(0).(func(context.Context, string) database.Plugin); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Plugin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokensPlugins provides a mock function with given fields: ctx, _a1
func (_m *Manager) GetTokensPlugins(ctx context.Context, _a1 string) (map[string]tokens.Plugin, error) {
	ret := _m.Called(ctx, _a1)

	var r0 map[string]tokens.Plugin
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]tokens.Plugin); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]tokens.Plugin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, di, bc, db, dx, ss, _a6
func (_m *Manager) Init(ctx context.Context, di database.Plugin, bc map[string]blockchain.Plugin, db map[string]database.Plugin, dx map[string]dataexchange.Plugin, ss map[string]sharedstorage.Plugin, _a6 map[string]tokens.Plugin) error {
	ret := _m.Called(ctx, di, bc, db, dx, ss, _a6)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Plugin, map[string]blockchain.Plugin, map[string]database.Plugin, map[string]dataexchange.Plugin, map[string]sharedstorage.Plugin, map[string]tokens.Plugin) error); ok {
		r0 = rf(ctx, di, bc, db, dx, ss, _a6)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
