// Code generated by mockery v2.46.0. DO NOT EDIT.

package blockchaincommonmocks

import (
	common "github.com/hyperledger/firefly/internal/blockchain/common"
	blockchain "github.com/hyperledger/firefly/pkg/blockchain"

	context "context"

	core "github.com/hyperledger/firefly/pkg/core"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// BlockchainCallbacks is an autogenerated mock type for the BlockchainCallbacks type
type BlockchainCallbacks struct {
	mock.Mock
}

// BulkOperationUpdates provides a mock function with given fields: ctx, namespace, updates
func (_m *BlockchainCallbacks) BulkOperationUpdates(ctx context.Context, namespace string, updates []*core.OperationUpdate) error {
	ret := _m.Called(ctx, namespace, updates)

	if len(ret) == 0 {
		panic("no return value specified for BulkOperationUpdates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*core.OperationUpdate) error); ok {
		r0 = rf(ctx, namespace, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchBlockchainEvents provides a mock function with given fields: ctx, events
func (_m *BlockchainCallbacks) DispatchBlockchainEvents(ctx context.Context, events common.EventsToDispatch) error {
	ret := _m.Called(ctx, events)

	if len(ret) == 0 {
		panic("no return value specified for DispatchBlockchainEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.EventsToDispatch) error); ok {
		r0 = rf(ctx, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OperationUpdate provides a mock function with given fields: ctx, plugin, nsOpID, status, blockchainTXID, errorMessage, opOutput
func (_m *BlockchainCallbacks) OperationUpdate(ctx context.Context, plugin core.Named, nsOpID string, status core.OpStatus, blockchainTXID string, errorMessage string, opOutput fftypes.JSONObject) {
	_m.Called(ctx, plugin, nsOpID, status, blockchainTXID, errorMessage, opOutput)
}

// PrepareBatchPinOrNetworkAction provides a mock function with given fields: ctx, events, subInfo, location, event, signingKey, params
func (_m *BlockchainCallbacks) PrepareBatchPinOrNetworkAction(ctx context.Context, events common.EventsToDispatch, subInfo *common.SubscriptionInfo, location *fftypes.JSONAny, event *blockchain.Event, signingKey *core.VerifierRef, params *common.BatchPinParams) {
	_m.Called(ctx, events, subInfo, location, event, signingKey, params)
}

// PrepareBlockchainEvent provides a mock function with given fields: ctx, events, namespace, event
func (_m *BlockchainCallbacks) PrepareBlockchainEvent(ctx context.Context, events common.EventsToDispatch, namespace string, event *blockchain.EventForListener) {
	_m.Called(ctx, events, namespace, event)
}

// SetHandler provides a mock function with given fields: namespace, handler
func (_m *BlockchainCallbacks) SetHandler(namespace string, handler blockchain.Callbacks) {
	_m.Called(namespace, handler)
}

// SetOperationalHandler provides a mock function with given fields: namespace, handler
func (_m *BlockchainCallbacks) SetOperationalHandler(namespace string, handler core.OperationCallbacks) {
	_m.Called(namespace, handler)
}

// NewBlockchainCallbacks creates a new instance of BlockchainCallbacks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockchainCallbacks(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockchainCallbacks {
	mock := &BlockchainCallbacks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
